name: Build TDLib and Create Release

permissions:
  contents: write
  packages: write

# This workflow can be executed using a command like this:
# gh workflow run release.yml -f tdlib=056963e48fa8d3f89556239c22d6ac843d3c8a5b
on:
  workflow_dispatch:
    inputs:
      tdlib:
        description: "TDLib git ref"
        type: string
        required: true

jobs:
  parse-tdlib-version:
    name: "Parse TDLib version from tdlib/td"
    runs-on: ubuntu-22.04

    outputs:
      tdlib_version: ${{ steps.parse.outputs.tdlib_version }}

    steps:
      - name: Checkout tdlib/td
        uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}
          path: tdlib-src
          fetch-depth: 1

      - name: Parse version
        id: parse
        run: |
          # Parses the version from the CMakeLists.txt file
          # Example line: project(TDLib VERSION 1.8.41 LANGUAGES CXX C)
          VERSION_LINE=$(grep -E 'project\(TDLib VERSION [0-9]+\.[0-9]+\.[0-9]+' tdlib-src/CMakeLists.txt)
          REGEX='project\(TDLib VERSION ([0-9]+\.[0-9]+\.[0-9]+)'
          if [[ $VERSION_LINE =~ $REGEX ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Detected TDLib version: $VERSION"
            echo "tdlib_version=$VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "Could not detect TDLib version in CMakeLists.txt!"
            exit 1
          fi

  build-linux-x86_64:
    name: "Build TDLib / Linux x86_64 glibc"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd scripts
          ./build-linux.sh ${{ inputs.tdlib }} x86_64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-x86_64-glibc
          path: ${{ env.TO_UPLOAD }}
          # If you'd like to keep it as a .zip, ensure your build script outputs .zip
          # or set "if-no-files-found" to "ignore" to avoid errors.

  build-linux-arm64:
    name: "Build TDLib / Linux arm64 glibc (cross)"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Build TDLib
        run: |
          cd scripts
          ./build-linux.sh ${{ inputs.tdlib }} aarch64-linux-gnu.2.22
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-linux-arm64-glibc
          path: ${{ env.TO_UPLOAD }}

  build-macos-x86_64:
    name: "Build TDLib / macOS x86_64"
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Build TDLib
        run: |
          cd scripts
          ./build-macos.sh ${{ inputs.tdlib }}
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos-x86_64
          path: ${{ env.TO_UPLOAD }}

  build-macos-arm64:
    name: "Build TDLib / macOS arm64"
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Build TDLib
        run: |
          cd scripts
          ./build-macos.sh ${{ inputs.tdlib }}
      - name: Verify codesigning
        run: codesign -v ${{ env.TO_UPLOAD }}/libtdjson.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-macos-arm64
          path: ${{ env.TO_UPLOAD }}

  build-windows-x86_64:
    name: "Build TDLib / Windows x86_64"
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
        with:
          repository: "tdlib/td"
          ref: ${{ inputs.tdlib }}
      - name: vcpkg cache
        uses: actions/cache@v4
        with:
          path: '~\AppData\Local\vcpkg\archives'
          key: windows-vcpkg-${{ github.run_id }}
          restore-keys: |
            windows-vcpkg-
      - name: Install dependencies using vcpkg
        run: vcpkg install gperf:x64-windows-static openssl:x64-windows-static zlib:x64-windows-static
      - name: CMake version
        run: cmake --version
      - name: Build TDLib
        run: |
          mkdir to-upload
          mkdir build
          cd build
          cmake -A x64 `
            -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static `
            -DOPENSSL_USE_STATIC_LIBS=TRUE -DZLIB_USE_STATIC_LIBS=TRUE ..
          cmake --build . --target tdjson --config Release --parallel 4
          cd ..
          cp build\Release\tdjson.dll to-upload\tdjson.dll
          vcpkg list | Select-String openssl,zlib
      - uses: actions/upload-artifact@v4
        with:
          name: tdlib-windows-x86_64
          path: to-upload

  create-release:
    name: "Create or Update GitHub Release with TDLib artifacts"
    runs-on: ubuntu-22.04
    needs:
      - parse-tdlib-version
      - build-linux-x86_64
      - build-linux-arm64
      - build-macos-x86_64
      - build-macos-arm64
      - build-windows-x86_64

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Get TDLib version
        run: echo "TDLib version is ${{ needs.parse-tdlib-version.outputs.tdlib_version }}"

      - name: Checkout this repo (so we can push tag if needed)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # allow creating/pushing tags

      - name: Create tag if needed
        id: create_tag
        run: |
          VERSION=${{ needs.parse-tdlib-version.outputs.tdlib_version }}
          TAG="v${VERSION}"
          echo "Proposed tag: $TAG"

          # Check if the tag exists locally or remotely
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists locally."
            echo "tag_existed=true" >> $GITHUB_OUTPUT
          else
            # Might not exist locally, check remote
            if git ls-remote --exit-code . refs/tags/"$TAG" ; then
              echo "Tag $TAG exists in remote."
              echo "tag_existed=true" >> $GITHUB_OUTPUT
            else
              echo "Tag $TAG does not exist. Creating now..."
              git config user.name github-actions
              git config user.email github-actions@github.com
              git tag "$TAG"
              git push origin "$TAG"
              echo "tag_existed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Prepare artifact folder
        run: mkdir final_artifacts

      #
      # Instead of extracting each artifact, download it as a .zip
      # and rename it so we can publish the ZIP files directly.
      #
      - name: Download Linux x86_64 artifact (ZIP)
        run: |
          gh run download --name tdlib-linux-x86_64-glibc --archive zip
          mv artifacts-*.zip final_artifacts/tdlib-linux-x86_64-glibc.zip

      - name: Download Linux arm64 artifact (ZIP)
        run: |
          gh run download --name tdlib-linux-arm64-glibc --archive zip
          mv artifacts-*.zip final_artifacts/tdlib-linux-arm64-glibc.zip

      - name: Download macOS x86_64 artifact (ZIP)
        run: |
          gh run download --name tdlib-macos-x86_64 --archive zip
          mv artifacts-*.zip final_artifacts/tdlib-macos-x86_64.zip

      - name: Download macOS arm64 artifact (ZIP)
        run: |
          gh run download --name tdlib-macos-arm64 --archive zip
          mv artifacts-*.zip final_artifacts/tdlib-macos-arm64.zip

      - name: Download Windows x86_64 artifact (ZIP)
        run: |
          gh run download --name tdlib-windows-x86_64 --archive zip
          mv artifacts-*.zip final_artifacts/tdlib-windows-x86_64.zip

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: TDLib v${{ needs.parse-tdlib-version.outputs.tdlib_version }}
          tag_name: v${{ needs.parse-tdlib-version.outputs.tdlib_version }}
          files: |
            final_artifacts/tdlib-linux-x86_64-glibc.zip
            final_artifacts/tdlib-linux-arm64-glibc.zip
            final_artifacts/tdlib-macos-x86_64.zip
            final_artifacts/tdlib-macos-arm64.zip
            final_artifacts/tdlib-windows-x86_64.zip
